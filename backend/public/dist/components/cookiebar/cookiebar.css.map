{"version":3,"sources":["webpack:///./src/components/cookiebar/_cookiebar.scss","webpack:///./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAEA;EACC;EACA;EACA;EACA;EACA;EACA;EACA;AADD;ACoDI;ED/CA;IACC;IACA;EAFH;AACF;AC2DI;EDlDA;IACC;IACA;EANH;EAWC;IACC;EATF;EAYA;IACC;EAVD;EAaC;IACC;EAXF;EAcE;IACC;EAZH;EAgBA;;IAEC;EAdD;AACF;AAgBC;EACC;AAdF;AAeE;EACC;AAbH;AAeE;EACC;AAbH;AAeE;EACC;AAbH;AAeE;EACC;AAbH;AAgBG;EACC;AAdJ;AAgBG;EACC;AAdJ;AAkBC;EACC;AAhBF;AAkBC;EACC;EACA;AAhBF;AAkBC;EACC;EACA;AAhBF;AAmBE;EACC;EACA;EACA;EACA;AAjBH;AAmBE;EACC;EACA;AAjBH;AAoBC;EACC;EACA;AAlBF;AAmBE;EACC;AAjBH;AAoBC;;EAEC;AAlBF;AAsBE;;EACC;EACA;AAnBH;AAsBC;EACC;EACA;AApBF;AAuBE;EACC;AArBH;AAuBE;EACC;AArBH;AAyBE;EACC;AAvBH,C","file":"components/cookiebar/cookiebar.css","sourcesContent":["@import \"../../partial/scss/base\";\n\n.#{$prefix}cookiebar {\n\tbottom: 0;\n\tcursor: default;\n\tleft: 0;\n\tposition: fixed;\n\tright: 0;\n\ttop: 0;\n\tz-index: 1000000;\n\t@include media-breakpoint-up(sm) {\n\t\t.actions {\n\t\t\t.br-button {\n\t\t\t\t&.secondary {\n\t\t\t\t\tmargin-bottom: v(spacing-scale-2xh);\n\t\t\t\t\tmargin-right: v(spacing-scale-5x);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t@include media-breakpoint-down(xs) {\n\t\t.actions {\n\t\t\t.br-button {\n\t\t\t\t&.secondary {\n\t\t\t\t\tmargin-bottom: v(spacing-scale-2xh);\n\t\t\t\t\tmargin-right: 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.br-modal-header {\n\t\t\t.br-modal-title p {\n\t\t\t\tfont-size: v(font-size-scale-up-02);\n\t\t\t}\n\t\t}\n\t\t.group-description {\n\t\t\tfont-size: v(font-size-scale-down-01);\n\t\t}\n\t\t.br-switch {\n\t\t\tlabel {\n\t\t\t\tfont-size: v(font-size-scale-down-01);\n\t\t\t}\n\t\t\t.switch-data {\n\t\t\t\t&::before {\n\t\t\t\t\tfont-size: v(font-size-scale-down-01);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.group-name,\n\t\t.group-size {\n\t\t\tfont-size: v(font-size-scale-down-01);\n\t\t}\n\t}\n\t&.default {\n\t\ttop: unset;\n\t\t.entry-content {\n\t\t\tdisplay: none;\n\t\t}\n\t\t.info-text {\n\t\t\tdisplay: block;\n\t\t}\n\t\t.main-content {\n\t\t\tdisplay: none;\n\t\t}\n\t\t.parallel-content {\n\t\t\tdisplay: none;\n\t\t}\n\t\t.br-modal {\n\t\t\t> .br-card {\n\t\t\t\t--card-shadow: var(--surface-shadow-md-up);\n\t\t\t}\n\t\t\t.br-modal-body {\n\t\t\t\toverflow-y: unset;\n\t\t\t}\n\t\t}\n\t}\n\t.entry-text {\n\t\tmargin-bottom: 0;\n\t}\n\t.wrapper {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\t.info-text {\n\t\tdisplay: none;\n\t\tline-height: v(font-lineheight-medium);\n\t}\n\t.br-modal-header {\n\t\t.br-modal-title {\n\t\t\tfont-size: v(font-size-scale-up-06);\n\t\t\tmargin-bottom: v(spacing-scale-3xh);\n\t\t\tmax-height: unset;\n\t\t\twidth: auto;\n\t\t}\n\t\t.last-update {\n\t\t\tfont-size: v(font-size-scale-up-01);\n\t\t\tfont-weight: v(font-weight-semi-bold);\n\t\t}\n\t}\n\t.br-modal-body {\n\t\tflex: 1;\n\t\toverflow-y: scroll;\n\t\t&:focus {\n\t\t\toutline: none;\n\t\t}\n\t}\n\t.group-name,\n\t.group-size {\n\t\tcolor: v(color-primary-default);\n\t}\n\t.group-info,\n\t.cookie-info {\n\t\t.br-switch {\n\t\t\tpadding: v(spacing-scale-half);\n\t\t\twidth: 120px;\n\t\t}\n\t}\n\t.always-active {\n\t\tcolor: v(color-highlight);\n\t\tfont-weight: v(font-weight-semi-bold);\n\t}\n\t.cookie-info {\n\t\t.br-card {\n\t\t\tmargin-bottom: var(--card-margin);\n\t\t}\n\t\t.cookie-term {\n\t\t\tfont-weight: v(font-weight-semi-bold);\n\t\t}\n\t}\n\t.notes {\n\t\tp:first-child {\n\t\t\tfont-weight: v(font-weight-semi-bold);\n\t\t}\n\t}\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"sourceRoot":""}