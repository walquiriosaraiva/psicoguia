{"version":3,"sources":["webpack:///./src/components/upload/_upload.scss","webpack:///./src/partial/scss/mixins/_upload.scss","webpack:///./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAOA;EC2GE;ED/GD;EACA;EAMA;AALD;ACmHM;EACE,kCANkB;AD3G1B;ACmHM;EACE;EACA,gCAVkB;EAWlB;EACA;EACA;EACA;EACA;ADjHR;ACuGM;EACE,iCANkB;AD/F1B;ACuGM;EACE;EACA,+BAVkB;EAWlB;EACA;EACA;EACA;EACA;ADrGR;AC2FM;EACE,kCANkB;ADnF1B;AC2FM;EACE;EACA,gCAVkB;EAWlB;EACA;EACA;EACA;EACA;ADzFR;AC4FQ;EACE;AD1FV;AC4EM;EACE,+BANkB;ADpE1B;AC4EM;EACE;EACA,6BAVkB;EAWlB;EACA;EACA;EACA;EACA;AD1ER;AEiBI;EF5DF;IACC;IACA;IACA;EA8CD;EA3CC;IACC;IACA;EA6CF;EA1CA;IACC;EA4CD;EA1CA;IACC;IACA;EA4CD;AACF;AA1CC;EACC;AA4CF;AAxCE;EACC;AA0CH;AAzCG;;EAEC;EACA;AA2CJ;AAtCC;EACC;EACA;AAwCF;AAvCE;EACC;AAyCH;AAtCC;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAwCF;AAvCE;EACC;EACA;EACA;AAyCH;AAvCE;EACC;EACA;EACA;EACA;EACA;AAyCH;AArCC;EACC;EACA;AAuCF;AAtCE;EACC;EACA;EACA;EACA;EACA;AAwCH;AAtCE;EACC;EACA;AAwCH;AAtCE;EACC;EACA;EACA;EACA;EACA;EACA;EACA;AAwCH;AApCC;EACC;AAsCF;AAnCC;EACC;oDAAA;EAEA;EACA;AAqCF;AApCE;EACC;AAsCH,C","file":"components/upload/upload.css","sourcesContent":["@import \"../../partial/scss/base\";\n\n@mixin upload-tokens {\n\t--onboarding-dragging-color: red;\n\t--upload-z-index: var(--z-index-layer-0);\n}\n\n.#{$prefix}upload {\n\t@include upload_state;\n\t@include upload-tokens;\n\tz-index: var(--upload-z-index);\n\n\t@include media-breakpoint-down(xs) {\n\t\t.br-button.upload-button {\n\t\t\theight: auto;\n\t\t\tpadding: v(spacing-scale-base) v(spacing-scale-2x);\n\t\t\twidth: 100% !important;\n\t\t}\n\t\t.upload-button {\n\t\t\tspan {\n\t\t\t\tfont-size: v(font-size-scale-down-01);\n\t\t\t\twhite-space: break-spaces;\n\t\t\t}\n\t\t}\n\t\t.item {\n\t\t\tflex-wrap: nowrap;\n\t\t}\n\t\t.upload-list .support {\n\t\t\tflex-shrink: 0;\n\t\t\tmargin-right: var(--spacing-scale-base);\n\t\t}\n\t}\n\tinput {\n\t\tdisplay: none;\n\t}\n\n\t&.dragging {\n\t\t.upload-button {\n\t\t\tbackground-color: v(color-support-01);\n\t\t\tspan,\n\t\t\tsvg {\n\t\t\t\tcolor: var(--interactive);\n\t\t\t\tpointer-events: none;\n\t\t\t}\n\t\t}\n\t}\n\n\t.br-button.upload-button {\n\t\tmax-width: 550px;\n\t\twidth: 100%;\n\t\t&:active * {\n\t\t\tcolor: v(color-primary-pastel-01);\n\t\t}\n\t}\n\t.upload-button {\n\t\tborder: var(--surface-width-sm) dashed;\n\t\tborder-color: var(--interactive);\n\t\tborder-radius: var(--surface-rounder-sm);\n\t\tdisplay: block;\n\t\tpadding-left: v(spacing-scale-2x);\n\t\tpadding-right: v(spacing-scale-2x);\n\t\ttext-align: left;\n\t\twidth: 100%;\n\t\tsvg {\n\t\t\tcolor: var(--interactive);\n\t\t\tfont-size: v(icon-size-lg);\n\t\t\tpadding-left: v($spacing-scale-2x);\n\t\t}\n\t\tspan {\n\t\t\tcolor: var(--interactive);\n\t\t\tfont-size: v(font-size-scale-base);\n\t\t\tfont-style: italic;\n\t\t\tfont-weight: v(font-weight-regular);\n\t\t\tpadding-left: v(spacing-scale-half);\n\t\t}\n\t}\n\n\t.upload-list {\n\t\tmax-width: 550px;\n\t\tposition: relative;\n\t\t.content {\n\t\t\talign-self: center;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t\twhite-space: nowrap;\n\t\t\twidth: 70%;\n\t\t}\n\t\t.support {\n\t\t\talign-items: center;\n\t\t\tdisplay: flex;\n\t\t}\n\t\t.cargas {\n\t\t\tbox-sizing: border-box;\n\t\t\tcolor: v(color-secondary-08);\n\t\t\tdisplay: inline-block;\n\t\t\tleft: 54%;\n\t\t\tposition: relative;\n\t\t\ttext-align: right;\n\t\t\ttop: 4px;\n\t\t}\n\t}\n\n\t.br-tooltip {\n\t\tmax-width: 93%;\n\t}\n\n\t.#{$prefix}item {\n\t\t--item-padding: var(--spacing-scale-half) var(--spacing-scale-base)\n\t\t\tvar(--spacing-scale-half) var(--spacing-scale-2x);\n\t\talign-items: center;\n\t\tdisplay: flex;\n\t\t&:first-child {\n\t\t\tmargin-top: calc(var(--spacing-scale-half) * 2);\n\t\t}\n\t}\n}\n","@mixin upload($color: v(color-info, $color-info)) {\n  border: 1px solid v(color-secondary-01, $color-secondary-01);\n  box-shadow: 0 3px 6px v(color-secondary-04, $color-secondary-04);\n  margin-bottom: v(spacing-scale-2xh);\n  min-height: 248px;\n  padding-bottom: v(spacing-scale-2x);\n  padding-left: 360px;\n  padding-right: v(spacing-scale-6x);\n  padding-top: v(spacing-scale-4x);\n  @include media-breakpoint-down(sm) {\n    background-position: center 0;\n    padding-left: v(spacing-scale-2x);\n    padding-right: v(spacing-scale-2x);\n    padding-top: 180px;\n\n    .br-button {\n      &:hover {\n        background-color: transparent;\n      }\n    }\n\n    &:hover {\n      border: 1px solid v(color-primary-pastel-02, $color-primary-pastel-02);\n      // cursor: pointer;\n      cursor: copy;\n    }\n  }\n\n  &:hover {\n    border: 1px solid v(color-primary-pastel-02, $color-primary-pastel-02);\n    // cursor: pointer;\n    cursor: copy;\n  }\n\n  .upload-header {\n    color: v(color-secondary-07, $color-secondary-07);\n    font-size: v(font-size-scale-up-03, $font-size-scale-up-03) !important;\n    font-weight: v(font-weight-regular, $font-weight-regular) !important;\n  }\n\n  .upload-input {\n    display: none;\n  }\n\n  .upload-info {\n    color: v(color-info, $color-info);\n    display: block;\n    margin: v(spacing-scale-2x) 0;\n    padding-left: v(spacing-scale-5x);\n\n    .fa-info-circle {\n      font-size: v(font-size-scale-up-03, $font-size-scale-up-03) !important;\n      margin-left: calc(#{v(spacing-scale-5x)} * -1);\n      position: absolute;\n    }\n  }\n\n  .upload-file-list {\n    ul {\n      padding-left: 0;\n    }\n\n    li {\n      border-bottom: 1px solid v(color-secondary-04, $color-secondary-04);\n      color: v(color-info, $color-info);\n      font-size: v(font-size-scale-base, $font-size-scale-base) !important;\n      list-style: none;\n      padding: v(spacing-scale-base) 0 v(spacing-scale-base) v(spacing-scale-base);\n      position: relative;\n      width: 100%;\n\n      .del {\n        cursor: pointer;\n        display: inline;\n        line-height: 24px;\n        position: absolute;\n        right: 8px;\n      }\n    }\n\n    span {\n      display: inline-block;\n      overflow: hidden;\n      padding-right: v(spacing-scale-3x);\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      width: 100%;\n    }\n  }\n\n  .upload-add {\n    color: v(color-info, $color-info);\n    // cursor: pointer;\n    cursor: copy;\n    display: block;\n    font-weight: v(font-weight-regular, $font-weight-regular);\n    margin: v(spacing-scale-4x) 0;\n    padding-left: v(spacing-scale-4x);\n\n    .fa-plus {\n      font-size: v(font-size-scale-up-01, $font-size-scale-up-01) !important;\n      margin-left: calc(#{v(spacing-scale-3xh)} * -1);\n      margin-top: 0;\n      position: relative;\n    }\n  }\n\n  .upload-size {\n    text-align: right;\n    visibility: hidden;\n  }\n}\n\n@mixin upload_state {\n  /*** Estados ***/\n  @each $state, $color in (success, v(color-success)), (danger, v(color-danger)),\n    (warning, v(color-warning)), (info, v(color-info))\n    {\n    &.#{$state},\n    &[data-#{$state}] {\n      .upload-button {\n        border-color: $color;\n      }\n      .feedback.color-#{$state} {\n        align-items: center;\n        background: $color;\n        color: var(--color-secondary-01) !important;\n        display: inline-flex;\n        height: 35px;\n        margin-bottom: var(--spacing-scale-base);\n        padding: 5px;\n      }\n      @if ($state == warning) {\n        .feedback.color-warning {\n          color: var(--color-secondary-08) !important;\n        }\n      }\n    }\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"sourceRoot":""}