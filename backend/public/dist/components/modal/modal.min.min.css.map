{"version":3,"sources":["webpack://./node_modules/bootstrap/scss/mixins/_breakpoints.scss","webpack://./src/components/modal/_modal.scss","webpack://./src/partial/scss/mixins/_states.scss"],"names":[],"mappings":"AA4DI,yBC4BF,UACE,UArFF,CAsFE,oBACE,eApFJ,CAsFE,mBACE,eApFJ,CAsFE,oBACE,eApFJ,CAsFE,uCAEE,eArFJ,CACF,CA0FA,UAnGE,4BAaF,CAZE,iBACE,sCAAA,CACA,iBAcJ,CAbI,wBACE,iBAAA,CACA,OAAA,CACA,sCAeN,CAZE,gBACE,2BAAA,CACA,oBAAA,CACA,mBAAA,CACA,sCAAA,CACA,sBAAA,CACA,QAAA,CACA,uCAAA,CACA,eAAA,CACA,sBAAA,CACA,SAcJ,CAZI,0BACE,oBAAA,CACA,iBAcN,CChBC,sBACC,YDkBF,CCfC,4DAEC,gCAAA,CACA,kCAAA,CACA,gCAAA,CACA,gCDgBF,CAnBE,eACE,kCAqBJ,CAnBE,iBACE,YAAA,CACA,cAqBJ,CChCC,kBACC,YDkCF,CC/BC,oDAEC,gCAAA,CACA,kCAAA,CACA,gCAAA,CACA,gCDgCF,CAtBE,mBACE,sCAAA,CACA,eAwBJ,CArBE,iBACE,QAAA,CACA,2EAAA,CACA,qCAAA,CACA,YAAA,CACA,qCAAA,CACA,4CAAA,CACA,6CAAA,CACA,aAAA,CACA,+BAAA,CACA,WAAA,CACA,UAuBJ,CAtBI,oCACE,SAwBN,CAtBI,0CACE,oCAwBN,CAtBI,0CACE,oCAwBN,CAtBI,wBACE,YAwBN,CArBM,gDACE,oCAuBR,CCzEC,uBACC,YD2EF,CCxEC,8DAEC,gCAAA,CACA,kCAAA,CACA,gCAAA,CACA,gCDyEF","file":"modal.min.min.css","sourcesContent":["// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","@import \"../../partial/scss/base\";\n\n@mixin modal-token {\n  --modal-z-index: var(--z-index-layer-4);\n}\n\n\n@mixin modal {\n  z-index: var( --modal-z-index);\n  &-header {\n    margin-bottom: v(spacing-scale-3xh);\n    position: relative;\n    .close {\n      position: absolute;\n      right: 0;\n      top: calc(#{v(spacing-scale-half)} * -1);\n    }\n  }\n  &-title {\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n    display: -webkit-box;\n    font-size: v(font-size-scale-up-01);\n    font-weight: v($font-weight-bold);\n    margin: 0;\n    max-height: v(font-size-scale-up-07);\n    overflow: hidden;\n    text-overflow: ellipsis;\n    width: 80%;\n\n    &.is-inline {\n      -webkit-line-clamp: 1;\n      max-height: $h3-font-size * 2;\n    }\n    @include focus;\n  }\n  &-body {\n    margin: 0 0 v(spacing-scale-5x);\n  }\n  &-footer {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  p {\n    @include focus;\n  }\n\n  /*** Div sombreada e com scroll se necess√°rio para modal de termo de aceite ***/\n  .br-card {\n    --card-shadow: var(--surface-shadow-lg);\n    margin-bottom: 0;\n  }\n\n  .terms {\n    border: 0;\n    box-shadow: var(--surface-shadow-sm-inset), var(--surface-shadow-sm-inset-up);      \n    font-size: v(font-size-scale-base);    \n    height: 216px;\n    margin-bottom: var(--spacing-scale-2x);\n    margin-left: calc(#{v(spacing-scale-2x)} * -1);\n    margin-right: calc(#{v(spacing-scale-2x)} * -1);\n    overflow: auto;\n    padding: var(--spacing-scale-2x);\n    resize: none;\n    width: auto;    \n    &::-webkit-scrollbar {\n      width: 8px;\n    }\n    &::-webkit-scrollbar-track {\n      background: v(color-secondary-03);\n    }\n    &::-webkit-scrollbar-thumb {\n      background: v(color-secondary-06);\n    }\n    &:active {\n      outline: none;\n    }\n    &:hover {\n      &::-webkit-scrollbar-thumb {\n        background: v(color-secondary-07);\n      }\n    }\n    @include focus;\n  }\n}\n\n@include media-breakpoint-up(sm) {\n  .#{$prefix}modal {\n    width: auto;\n    &.is-xsmall {\n      max-width: 220px;\n    }\n    &.is-small {\n      max-width: 300px;\n    }\n    &.is-medium {\n      max-width: 500px;\n    }\n    &.is-large,\n    &.is-scroll {\n      max-width: 640px;\n    }\n  }\n}\n\n\n.#{$prefix}modal  {\n  @include modal;\n}","// Desabilitado\n@mixin disabled {\n\tcursor: not-allowed;\n\topacity: var(--disabled);\n\n\t* {\n\t\tpointer-events: none;\n\t}\n}\n\n// Hover\n@mixin hover {\n\t&:not(:disabled) {\n\t\t&:hover {\n\t\t\tbackground-image: linear-gradient(\n\t\t\t\trgba(var(--interactive-rgb), var(--hover)),\n\t\t\t\trgba(var(--interactive-rgb), var(--hover))\n\t\t\t);\n\t\t}\n\t\t&:active {\n\t\t\tbackground-image: linear-gradient(\n\t\t\t\trgba(var(--interactive-rgb), var(--pressed)),\n\t\t\t\trgba(var(--interactive-rgb), var(--pressed))\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Focus\n@mixin focus {\n\t&:focus {\n\t\toutline: none;\n\t}\n\n\t&.focus-visible,\n\t&:focus-visible {\n\t\toutline-color: var(--focus-color);\n\t\toutline-offset: var(--focus-offset);\n\t\toutline-style: var(--focus-style);\n\t\toutline-width: var(--focus-width);\n\t}\n}\n\n@mixin focus-shadow {\n\tborder-color: var(--focus-color);\n\tbox-shadow: 0 0 0 var(--surface-width-md) var(--focus-color);\n\toutline: none;\n}\n\n// Ativo\n@mixin active {\n\tbackground: var(--active);\n\tcolor: var(--color-secondary-01);\n}\n\n// Dark mode\n@mixin dark-mode {\n\t--text-color: var(--color-secondary-01);\n\t--interactive: var(--color-primary-pastel-01);\n\t--interactive-rgb: var(--rgb-primary-pastel-01);\n\t--visited: var(--color-secondary-04);\n\t--hover: var(--surface-opacity-sm);\n\t--pressed: var(--surface-opacity-lg);\n\t--focus-color: var(--color-support-10);\n\t--active: var(--color-secondary-01);\n}\n@mixin light-mode {\n\t--text-color: var(--color-secondary-08);\n\t--interactive: var(--color-primary-default);\n\t--interactive-rgb: var(--rgb-primary-default);\n\t--visited: var(--color-primary-darken-01);\n\t--hover: var(--surface-opacity-xs);\n\t--pressed: var(--surface-opacity-md);\n\t--focus-color: var(--color-support-03);\n\t--active: var(--color-primary-darken-01);\n}\n"]}